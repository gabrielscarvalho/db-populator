
# DB Populator
Make it easy to populate your test database, creating inserts based on a simple json:
```javascript
    import Random from ...
    const dbStructure = (id) => {
	    't_customer': {
	         'id': { 'type':  'int', val: id.getNext('t_customer') },
	         'name': { type:  'string', val: Random.fromList(['John', 'Paul', 'Suzan', 'Mark']) },
	    },
	    
	    't_address': {
	       'id': { 'type':  'int', val: id.getNext('t_address') },
	       'customer_id': { 'type':  'int', val: id.getCurrent('t_customer') },
	       'street': { type:  'string', val: Random.fromList(['St. Abc', 'St. Cde']) },
	       'number': { type:  'int', val: Random.number({ min:  1, max:  150 }) },
	       'is_main_address': { type:  'bool', val: Random.fromList([true, false]) }
	    }
   }
```
Containing: table, column, type and value.
After that, you can create your data, calling:
```javascript
    const  customer  = insert.add('t_customer', { 'email':  'john120@gmail.com' })
    insert.add('t_address', { 'street':  'delivery address' });
    insert.add('t_address', { 'street':  'invoice address', customer_id: customer.id });
    insert.printSQLs();
```

And that's all! It will return your inserts.
## About the json
It must contain the structure:
```javascript
    {
    <table_name> : {
       <column_name or easier identifier> :  { type: <type_of_column>, val: <raw_or_fn()>, columnName: <optional String>  }
    }
```
Example:
```javascript
    {
     't_customer' : {
         'id': { 'type':  'int', val:  id.getNext('t_customer'), column: 'customer_id' },
         'name' : { type: 'string', val: 'John', columnName: 'customer_name' },
         'birth_date': { type: 'date', val: Random.date({ minYear:  1970, maxYear:  2010 })} 
      }
    }
```
In this example, if we execute:
```javascript
    insert.add('t_customer', {name: 'Mary'}); //  {customer_id: 1, customer_name: 'Mary', birth_date: 1996-03-11}
    insert.add('t_customer', {}); //  {customer_id: 2, customer_name: 'John', birth_date: 1997-01-06}
    insert.add('t_customer', {id: 5}); //  {customer_id: 5, customer_name: 'John', birth_date: 1990-10-01} 
```
**Notice that**:

 - if you do not inform the field value on insert method,  it will take from the json.
 - *id.getNext('t_customer')* helps you to get the next id easily, but you still can force the next value.
	 - *id.getCurrent('t_customer')* will return the last customer created id
 - the field "val" must be the literal value or a function that will return it.
	 - In the example of Random.date, it returns:

```javascript
 Random.date = (params) => {
     return () => {
        return formatDate(randomDate, params)
     }
} 
```

## Types

Types are pre-defined in order to populate the values into the insert. 
You can see them at: [ValueStrategyParser](https://github.com/gabrielscarvalho/db-populator/blob/master/lib/value-strategy-parser.js "ValueStrategyParser")

At this moment, you can use:


|type| effect on queries| 
| ------------ | ------------ |
|string| will put quotes at the variable|
|int| will parse to int |
|float| will parse to float|
| datetime| return a string datetime 'YYYY-MM-DDTHH:mm:ss'|
| date | return a string date 'YYYY-MM-DD'|
|raw| will just add the value the same way it is. You can use this for functions, for example, NOW()|

You are able to add or replace types if required.

```javascript
const  insert  =  new  Insertable(dbStructure, initialIds);

insert.addParser('my-special-type', (val)  => {
     //return insert.addQuotes('timestamp' + val);  // easier way to use the same quotes everywhere
     return '"timestamp ' + val +'"'; //remember to add quotes if is string 
});

configure(new GenericSQLBuilder(dbStructure(id, valueStrategyParser)));

```

## Basic Example

Check the folder: [example](https://github.com/gabrielscarvalho/db-populator/tree/master/example "example")
Inside of it, you will find 3 files:
* db-structure: defines the db rules
* insert: configure the insert 
* index.js: run your command.
```javascript
const  Insertable  =  require('./lib/insertable');
//your db mapping
const  dbStructure  =  require('./db-structure');

const  initialIds  = {
	't_customer':  30,
	't_address':  0
};
const  insert  =  new  Insertable(dbStructure, initialIds);

insert.add('t_customer', { name: 'John'});
insert.printSQLs();
```
## INSERTABLE METHODS

### insert.add(string tableName, object extraData)
Creates a new sql insert and save it.
Keep in mind this table:
```javascript
    {
     't_customer' : {
         'id': { 'type':  'int', val:  id.getNext('t_customer'), column: 'customer_id' },
         'name' : { type: 'string', val: 'John', columnName: 'customer_name' }
      }
    }
```
If you call insert, it will return your filled object.
```javascript
    const customer = insert.add('t_customer', { name: 'Mary' })
    console.log('just created: ', customer.name)
```    
You can use it to make cascade inserts:

```javascript
    const customer = insert.add('t_customer', { name: 'Mary' })
    insert.add('t_address', { customer_id: customer.id})
```
**Note**: the object returned will have the same props as your table is mapped.
 That is the reason you can use *customer.id* on the second insert, instead of *customer.customer_id* (that is the real column name)

### insert.printSQLs()
Print all SQLs saved until that moment.
### insert.objects
Return all objects that you have created
### insert.completeObjects
Prints all objects that will be used to create your inserts. As the name says, is more complete.

### insert.setNextIdStrategy(fn)
Set the strategy to choose the next id:

```javascript
insert.setNextIdStrategy((tableName, previousId)  => {
	if(tableName == 't_customer') {
         return (previousId+10);
    }
	return  --previousId;
});

```
### insert.setQueryBuilder(clazz)
If the SQL structure:

> INSERT INTO tableName  (columnA, columnB)  VALUES (valueA, 'valueB') 

does not work for you,  you can create your own QueryBuilder.
Just create your own based on: [https://github.com/gabrielscarvalho/db-populator/blob/master/db/GenericSQLBuilder.js](https://github.com/gabrielscarvalho/db-populator/blob/master/db/GenericSQLBuilder.js)

A sample: 

```javascript


class YourOwnQueryBuilder {

    constructor(dbStructure, valueStrategyParser = new ValueStrategyParser('"')) {
        this.structure = dbStructure;
        this.valueStrategyParser = valueStrategyParser;
        this.sqls = [];
    }

    // You just need to recreate this method:
    insert(tableName, dataRow) {
        let sql = 'INSERT INTO ' + tableName;

        let columnNames = [];
        let values = [];

        for(const columnName in dataRow) {
            const column = dataRow[columnName];
            columnNames.push(columnName);
	        //valueStrategyParser will apply what your field type requires.
            const parsedValue = this.valueStrategyParser.apply(column.type,column.val);
            values.push(parsedValue);
        }
		//a simple concat of the SQL. change it as you wish;
        sql  = sql + "(" + columnNames.join(',') + ")";
        sql  = sql + " VALUES (" + values.join(',') + ");";

        this.sqls.push(sql);
    }

}
```
After that, just inform Insertable about it:
```javascript
insert.setQueryBuilder(YourOwnQueryBuilder);
insert.add('t_customer', {});
```
### insert.useStringQuoteSeparator(quoteCharSeparator)
Sets the char that will wrap every string on the query
```javascript
insert.useStringQuoteSeparator('A_COMPLETELY_INVALID_ONE');
insert.add('t_customer', {});
// insert into ... VALUES(A_COMPLETELY_INVALID_ONEjohnA_COMPLETELY_INVALID_ONE, other values..)
// a valid one: insert.useStringQuoteSeparator('"');
```
Obviously, use it to switch between single quote ' or double quote: ".

### insert.addQuotes(string)
When creating custom parsers, it will help you to standardize the quote used.
Check the *insert.addParser()* method for the example;
Its just a shortcut to add the quotes to a simple string.

### insert.addParser(type, fn)
Allows you to add new parsers.
```javascript
insert.addParser('my-special-type', (val)  => {
	insert.addQuotes('my special treatment!!!  '+  val)
});
//db-structure.js:
't_customer' : {
    'field_x': {type: 'my-speacial-type', val: 'hi'}
}
insert.add('t_customer', {});
// insert into t_customer (field_x) values ('my special treatment!!! hi');
```
